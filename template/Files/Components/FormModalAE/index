import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { reduxForm, Field, getFormSubmitErrors, formValueSelector } from 'redux-form' // eslint-disable-line
import { connect } from 'react-redux'
ADD_DEPENDENCY

OTHER_DEPENDENCY
import { } from 'reactstrap'
import { } from 'react-bootstrap'
import { Form, FormCustomError, FieldValidate, FieldNormalize } from 'components/D-CoreUI'
OTRO_ESTILO

class View extends Component {
  constructor (props) {
    super(props)

    this.state = {}
  }

  render () {
    return (
      <Form onSubmit={this.props.handleSubmit}>
ADD_FIELD

        { this.props.submitError.customError &&
          <FormCustomError title={this.props.submitError.customError} />
        }
      </Form>
    )
  }
}

View.defaultProps = {
  submitError: {},
ADD_DEFAULT_PROP
}

View.propTypes = {
  handleSubmit: PropTypes.func, // this prop intercepts onSubmit
  submitError: PropTypes.object,
ADD_PROPTYPES
}

function validate (values, props) {
  let errors = {}

  return errors
}

// Decorate the form component
const ViewRedux = reduxForm({
  form: 'formAE', // a unique name for this form
  validate
})(View)

const selector = formValueSelector('formAE') // eslint-disable-line

const mapStateToProps = (state) => {
  return {
    submitError: getFormSubmitErrors('formAE')(state),
ADD_INYECT_PROP
  }
}

const mapDispatchToProps = {
ADD_INYECT_ACTION
}

export default connect(mapStateToProps, mapDispatchToProps)(ViewRedux)
